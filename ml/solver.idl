quote(c, "#include \"../c/phage.h\"");

import "atom.idl";

quote(c, "void free_solver(solver* s) { destroy_solver(*s); }");
quote(c, "void free_model(model* m) { destroy_model(*m); }");
quote(c, "void free_intvar(intvar* v) { destroy_intvar(*v); }");

typedef enum { SAT, UNSAT, UNKNOWN } result;
typedef enum { VAR_INORDER, VAR_FIRSTFAIL, VAR_LEAST, VAR_GREATEST } var_choice;
typedef enum { VAL_MIN, VAL_MAX, VAL_SPLIT } val_choice;

typedef struct {
  int conflicts;
  int restarts;
} stats;

typedef [abstract,ptr,finalize(free_solver)] struct solver_s* solver;
typedef [abstract,ptr,finalize(free_model)] struct model_s* model;
typedef [abstract,ptr,finalize(free_intvar)] struct intvar_s* intvar;
typedef [abstract,ptr] struct brancher_s* brancher;

quote(mlmli, "type t  = solver");

solver new_solver(void);
// bool propagate([in] solver);

brancher new_brancher(var_choice varc, val_choice valc, [in,size_is(sz)] intvar vs[], int sz);
brancher seq_brancher([in,size_is(sz)] brancher bs[], int sz);
void add_brancher([in] solver s, [in] brancher b);

result solve([in] solver s, int clim);

boolean post_atom([in] solver s, atom at);

boolean post_clause([in] solver s, [in,size_is(sz)] atom cl[], int sz);

intvar new_intvar([in] solver s, int lb, int ub);
atom new_boolvar([in] solver s);

model get_model([in] solver s);
int int_value([in] model m, [in] intvar v);
boolean atom_value([in] model m, atom at);

atom ivar_le([in] intvar v, [in] int k);
atom ivar_eq([in] intvar v, [in] int k);

pred_t new_pred([in] solver s, [in] int lb, [in] int ub);
atom pred_ge([in] pred_t p, [in] int k);

stats get_statistics([in] solver s);

quote(mli, "val ivar_lt : intvar -> int -> Atom.t");
quote(mli, "val ivar_ge : intvar -> int -> Atom.t");
quote(mli, "val ivar_gt : intvar -> int -> Atom.t");
quote(mli, "val ivar_ne : intvar -> int -> Atom.t");

quote(ml, "let ivar_lt v k = ivar_le v (k-1)");
quote(ml, "let ivar_ge v k = Atom.neg (ivar_lt v k)");
quote(ml, "let ivar_gt v k = Atom.neg (ivar_le v k)");
quote(ml, "let ivar_ne v k = Atom.neg (ivar_eq v k)");
